Analysis procedure for f4 tests

---------"initial_f4"---------
The following individuals were removed from f4 calculations due to low coverage.
"8_1_lys1_ex2_L1"
"7_2_lys2_ex2_L1"
"163_lys1_ex2_L1"
"16_2_lys3_ex2_L1"
"161_lys1_ex2_L1"
"14_3_lys1_ex2_L1"
"131_1_lys1_ex2_L1"
"128_2_lys2_ex2_L1"
F4 tests were run in the R interface of ADMIXTOOLS 2.
It uses a block-jacknife resampling method to compute standard errors.
SNP block size was 50cM.
SNPs were not filtered based on missingness.
adjust_pseudohaploid was set to TRUE, as the data were not diploid.
2444 SNPs remain after filtering for this run. 2257 are polymorphic.
Indexes "Tenea_EarlyRom" and "Tenea_Rom" were initially concatenated into "Tenea_Roman_All".

---------"concatenated_f4"---------
concatenated_f4 was generated by merging some of the initial populations.
"Amvrakia_LateCl" and "Amvrakia_Cl" were merged into "Amvrakia_Cl_LateCl"
"Amvrakia_Hel" and "Amvrakia_Hel" were merged into "Amvrakia_Hel_Arch"
"Tenea_Hel" and "Tenea_Arch" were merged into "Tenea_Hel_Arch"
The rest of the presets were the same as above run.
29479 SNPs remain after filtering. 27401 are polymorphic.

Results in "inverted" files are calculated with the formula (pop1-pop3)(pop2-pop4).
Theoretical expectations are not so clear in this case, as they depend on the expected
proportions of admixture (see accompanying figure from Lipson, 2020).

---------"f4_marginal_more_romans_common_SNPs"---------
"f4_marginal_more_romans_common_SNPs" was generated by calculating f2 blocks seperately
per combination of populations. In previous calculations, if a SNP was
missing completely from a population, it was discarded. By calculating f2
blocks seperately, the aformentioned problem is avoided and more SNPs
are included in f4 calculations.
Since there are more SNPs available, samples with no individuals were discarded.
The parameter "maxmiss" was set to 0.1. From ADMIXTOOLS documentation:
"Discard SNPs which are missing in a fraction of populations higher than maxmiss"

"f4_marginal_more_romans_common_SNPs_inverted" was generated by swapping 2nd and
3rd population. The output displays populations in the order of the test i.e.:
(col_1 - col_2) * (col_3 - col_4)
